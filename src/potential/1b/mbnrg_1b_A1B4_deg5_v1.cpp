#include "mbnrg_1b_A1B4_deg5_v1.h"

////////////////////////////////////////////////////////////////////////////////

namespace mbnrg_A1B4_deg5 {

mbnrg_A1B4_deg5_v1::mbnrg_A1B4_deg5_v1(const std::string mon1) {
    // =====>> BEGIN SECTION CONSTRUCTOR <<=====
    // =>> PASTE RIGHT BELOW THIS LINE <==

    if (mon1 == "ccl4") {
        coefficients = std::vector<double>{-1.016812677099354e+03,  // 0
                                           1.057300990191948e+03,   // 1
                                           -9.807178399591425e+02,  // 2
                                           -8.015864272957831e+02,  // 3
                                           -3.687547725272449e+02,  // 4
                                           -1.399762802459218e+02,  // 5
                                           -7.146803213998851e+02,  // 6
                                           1.403805568338836e+03,   // 7
                                           -1.187344258347729e+03,  // 8
                                           -1.098086802610375e+03,  // 9
                                           -6.185935878145382e+02,  // 10
                                           -1.327203255786800e+02,  // 11
                                           5.537449284089505e+02,   // 12
                                           -2.498782053619925e+03,  // 13
                                           6.474192236036998e+02,   // 14
                                           -1.163979350600481e+02,  // 15
                                           4.281515142123855e+03,   // 16
                                           2.893443681861492e+03,   // 17
                                           -3.154059500433917e+02,  // 18
                                           -8.727110929811679e+02,  // 19
                                           -3.976517154559061e+02,  // 20
                                           1.366673099944695e+03,   // 21
                                           -1.378947997656054e+03,  // 22
                                           1.529783386777270e+03,   // 23
                                           2.228868504085858e+02,   // 24
                                           -7.547864924985424e+02,  // 25
                                           1.309620964364876e+03,   // 26
                                           -6.468363721441269e+02,  // 27
                                           -1.231970864095867e+03,  // 28
                                           2.143619915166732e+02,   // 29
                                           7.663831166459387e+02,   // 30
                                           -9.677744179177838e+02,  // 31
                                           3.319391140562971e+02,   // 32
                                           2.284494173291835e+02,   // 33
                                           -2.053294289590462e+02,  // 34
                                           -7.319156603247276e+01,  // 35
                                           5.618510184095555e+02,   // 36
                                           7.425740449640305e+02,   // 37
                                           3.547649240167618e+03,   // 38
                                           5.323613672400421e+02,   // 39
                                           9.149952823250636e+02,   // 40
                                           6.132523584839528e+02,   // 41
                                           -8.726934287453550e+02,  // 42
                                           -1.347161174099335e+03,  // 43
                                           2.689918727823180e+02,   // 44
                                           -8.436623683588189e+02,  // 45
                                           -2.618544867124453e+02,  // 46
                                           6.445265351510704e+02,   // 47
                                           -1.731798390165629e+03,  // 48
                                           -7.925656916798457e+02,  // 49
                                           4.717071259186630e+03,   // 50
                                           7.343841569138174e+02,   // 51
                                           -1.312715513909214e+03,  // 52
                                           4.281404970382408e+03,   // 53
                                           -6.744422720269110e+01,  // 54
                                           2.454141257269359e+02,   // 55
                                           3.484848465086885e+01,   // 56
                                           -8.518833480366152e+02,  // 57
                                           -3.474548858093007e+01,  // 58
                                           4.027658886183439e+01,   // 59
                                           -8.972769558554452e+02,  // 60
                                           1.883429490464295e+02,   // 61
                                           7.548179858569503e+02,   // 62
                                           -5.780609477483221e+02,  // 63
                                           4.077733320785345e+02,   // 64
                                           -2.574232088506856e+02,  // 65
                                           3.444195169434753e+03,   // 66
                                           -1.310387403365882e+02,  // 67
                                           2.838847303112578e+02,   // 68
                                           -3.745720344715111e+01,  // 69
                                           -5.265222647660473e+02,  // 70
                                           2.560373749339468e+02,   // 71
                                           -1.287519810585577e+03,  // 72
                                           -6.842825990139587e+02,  // 73
                                           -8.362562483381237e+01,  // 74
                                           -1.274838674934252e+02,  // 75
                                           -6.652990404123146e+02,  // 76
                                           3.502624796854815e+01,   // 77
                                           8.317054365933898e+02,   // 78
                                           1.937222280244646e+02,   // 79
                                           -2.866703004737761e+02,  // 80
                                           -6.679324143147530e+02,  // 81
                                           1.513334876558485e+01,   // 82
                                           1.143966194509696e+03,   // 83
                                           2.347749976441186e+02,   // 84
                                           -4.306900451540263e+02,  // 85
                                           2.389400442768688e+03,   // 86
                                           -1.840187298229731e+02,  // 87
                                           -3.666317637797310e+02,  // 88
                                           2.954790115121645e+03,   // 89
                                           -3.247963780897618e+02,  // 90
                                           -1.967030072782057e+02,  // 91
                                           9.875228471627246e+02,   // 92
                                           -7.333266960188999e+01,  // 93
                                           -4.833866819480300e+02,  // 94
                                           -7.333433227404120e+02,  // 95
                                           -4.620588075303239e+02,  // 96
                                           -9.490051868673202e+02,  // 97
                                           -3.445691434460747e+02,  // 98
                                           6.529306884209515e+02,   // 99
                                           2.283043900398664e+02,   // 100
                                           -3.782489557696174e+02,  // 101
                                           8.061117592663497e+01,   // 102
                                           4.260673336505858e+02,   // 103
                                           -1.577561564894085e+02,  // 104
                                           -1.174511463125548e+02,  // 105
                                           -1.697391003699202e+01,  // 106
                                           -5.766292151723390e+01,  // 107
                                           -1.500778852637098e+02,  // 108
                                           -2.025643961176985e+01,  // 109
                                           -6.762303446267161e+02,  // 110
                                           -5.592895656256383e+02,  // 111
                                           -2.822828149683074e+02,  // 112
                                           -2.247601849470618e+02,  // 113
                                           -3.394507954595693e+02,  // 114
                                           1.865214982545927e+01,   // 115
                                           -9.009567745905385e+02,  // 116
                                           1.718523849278148e+03,   // 117
                                           4.837638083149393e+01,   // 118
                                           -5.754419723526759e+00,  // 119
                                           9.668625509952422e+01,   // 120
                                           -1.043266999475066e+02,  // 121
                                           4.267295191680714e+02,   // 122
                                           -7.534283942958406e+02,  // 123
                                           8.970141070230584e+00,   // 124
                                           -9.466405005199219e+01,  // 125
                                           6.324320121621638e+02,   // 126
                                           -1.028039707327539e+02,  // 127
                                           -5.654417264265225e+02,  // 128
                                           -3.547589081694570e+02,  // 129
                                           1.358754804413565e+03,   // 130
                                           -3.078277792281040e+02,  // 131
                                           3.431745799727272e+02,   // 132
                                           -3.913484151891081e+02,  // 133
                                           -1.450557226296683e+02,  // 134
                                           2.048269838294109e+02,   // 135
                                           5.471194426396045e-01,   // 136
                                           -4.513016217155775e+02,  // 137
                                           1.522907685339955e+01,   // 138
                                           5.405698394811544e+01,   // 139
                                           4.616040365262165e+01,   // 140
                                           2.398763446039803e+02,   // 141
                                           -4.375276366700930e+02,  // 142
                                           2.078728967211892e+02,   // 143
                                           5.694297079822228e+01,   // 144
                                           -3.553028134740081e+02,  // 145
                                           9.352901076843054e+02,   // 146
                                           5.619472248421435e+00,   // 147
                                           -4.804815601867704e+02,  // 148
                                           5.144398082949667e+02,   // 149
                                           1.902717666810989e+02,   // 150
                                           2.520356181487976e+03,   // 151
                                           1.118465850999467e+03,   // 152
                                           -7.827981120589602e+01,  // 153
                                           -8.309688887222886e+01,  // 154
                                           -5.157657307745738e+01,  // 155
                                           -1.468827618748539e+02,  // 156
                                           -1.484185682879217e+02,  // 157
                                           -8.042507226600699e+02,  // 158
                                           -4.690369925660106e+02,  // 159
                                           -1.308472865520723e+02,  // 160
                                           1.949068910158698e+02,   // 161
                                           -4.153916103576710e+02,  // 162
                                           -2.304318962754989e+02,  // 163
                                           5.841372634442138e+02,   // 164
                                           -4.157771750442253e+02,  // 165
                                           -2.162501221719197e+02,  // 166
                                           -8.558541040330049e+01,  // 167
                                           2.327232902329607e+00,   // 168
                                           2.055199223823476e+03,   // 169
                                           -8.151165475130897e+01,  // 170
                                           3.641150091088117e+03,   // 171
                                           -4.203387608924339e+02,  // 172
                                           1.083814809617219e+02,   // 173
                                           4.439893707787716e+02,   // 174
                                           9.588083107132030e+02,   // 175
                                           4.206136499057267e+02,   // 176
                                           -1.695763642276631e+02,  // 177
                                           2.010383145318195e+03,   // 178
                                           3.361887983968832e+03,   // 179
                                           1.609860649282021e+02,   // 180
                                           -6.942461640104174e+02,  // 181
                                           -2.526230428494867e+02,  // 182
                                           1.540953017418814e+01,   // 183
                                           -6.261369832670908e+02,  // 184
                                           -1.229311936637439e+02,  // 185
                                           -4.316117545275143e+02,  // 186
                                           -1.435123716338623e+02,  // 187
                                           -5.741169530434159e+02,  // 188
                                           -6.751364569461325e+01,  // 189
                                           -6.232208947485234e+01,  // 190
                                           -1.189479496399365e+02,  // 191
                                           -1.500231900768380e+02,  // 192
                                           2.391035388122287e+02,   // 193
                                           -2.944217754207963e+01,  // 194
                                           -3.027730482419587e+02,  // 195
                                           -1.710939702985713e+02,  // 196
                                           4.392795682744184e+02,   // 197
                                           2.268548667111882e+01,   // 198
                                           4.191814906240568e+01,   // 199
                                           4.366577356464936e+03,   // 200
                                           -4.684410633162450e+02,  // 201
                                           -7.897819618280802e+02,  // 202
                                           2.784369167417854e+02,   // 203
                                           -1.669948299638951e+01,  // 204
                                           2.368264621576047e+02,   // 205
                                           7.499491988046714e+02};  // 206
        m_k_x_intra_A_B_1 = 9.470284670255602e-01;                  // A^(-1))
        m_k_x_intra_B_B_1 = 4.459380432570358e-01;                  // A^(-1))
        m_ri = 6.000000000000000e+00;                               // A
        m_ro = 8.000000000000000e+00;                               // A

    }  // end if mon1 == "ccl4"
    // =====>> END SECTION CONSTRUCTOR <<=====
}

//----------------------------------------------------------------------------//

double mbnrg_A1B4_deg5_v1::f_switch(const double r, double& g) {
    if (r > m_ro) {
        g = 0.0;
        return 0.0;
    } else if (r > m_ri) {
        const double t1 = M_PI / (m_ro - m_ri);
        const double x = (r - m_ri) * t1;
        g = -std::sin(x) * t1 / 2.0;
        return (1.0 + std::cos(x)) / 2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

std::vector<double> mbnrg_A1B4_deg5_v1::eval(const double* xyz1, const size_t n) {
    std::vector<double> energies(n, 0.0);
    std::vector<double> energies_sw(n, 0.0);

    std::vector<double> xyz(15);
    double sw = 0.0;
    polynomial my_poly;

    for (size_t j = 0; j < n; j++) {
        const double* mon1 = xyz1 + 15 * j;

        if (false) {
            continue;
        }

        std::copy(mon1, mon1 + 15, xyz.begin() + 0);

        const double* coords_A_1_a = xyz.data() + 0;

        const double* coords_B_1_a = xyz.data() + 3;

        const double* coords_B_2_a = xyz.data() + 6;

        const double* coords_B_3_a = xyz.data() + 9;

        const double* coords_B_4_a = xyz.data() + 12;

        double w12 = -9.721486914088159e-02;  // from MBpol
        double w13 = -9.721486914088159e-02;
        double wcross = 9.859272078406150e-02;

        variable vs[10];

        double xs[10];

        xs[0] = vs[0].v_exp(m_k_x_intra_A_B_1, coords_A_1_a, coords_B_1_a);
        xs[1] = vs[1].v_exp(m_k_x_intra_A_B_1, coords_A_1_a, coords_B_2_a);
        xs[2] = vs[2].v_exp(m_k_x_intra_A_B_1, coords_A_1_a, coords_B_3_a);
        xs[3] = vs[3].v_exp(m_k_x_intra_A_B_1, coords_A_1_a, coords_B_4_a);
        xs[4] = vs[4].v_exp(m_k_x_intra_B_B_1, coords_B_1_a, coords_B_2_a);
        xs[5] = vs[5].v_exp(m_k_x_intra_B_B_1, coords_B_1_a, coords_B_3_a);
        xs[6] = vs[6].v_exp(m_k_x_intra_B_B_1, coords_B_1_a, coords_B_4_a);
        xs[7] = vs[7].v_exp(m_k_x_intra_B_B_1, coords_B_2_a, coords_B_3_a);
        xs[8] = vs[8].v_exp(m_k_x_intra_B_B_1, coords_B_2_a, coords_B_4_a);
        xs[9] = vs[9].v_exp(m_k_x_intra_B_B_1, coords_B_3_a, coords_B_4_a);

        sw = 1.0;

        energies[j] = my_poly.eval(xs, coefficients.data());
        energies_sw[j] = energies[j] * sw;
    }
    return energies_sw;
}

//----------------------------------------------------------------------------//

std::vector<double> mbnrg_A1B4_deg5_v1::eval(const double* xyz1, double* grad1, const size_t n,
                                             std::vector<double>* virial) {
    std::vector<double> energies(n, 0.0);
    std::vector<double> energies_sw(n, 0.0);

    std::vector<double> xyz(15);
    double sw = 0.0;
    polynomial my_poly;

    for (size_t j = 0; j < n; j++) {
        const double* mon1 = xyz1 + 15 * j;

        if (false) {
            continue;
        }

        std::vector<double> gradients(15, 0.0);

        std::copy(mon1, mon1 + 15, xyz.begin() + 0);
        const double* coords_A_1_a = xyz.data() + 0;

        const double* coords_B_1_a = xyz.data() + 3;

        const double* coords_B_2_a = xyz.data() + 6;

        const double* coords_B_3_a = xyz.data() + 9;

        const double* coords_B_4_a = xyz.data() + 12;

        double* coords_A_1_a_g = gradients.data() + 0;

        double* coords_B_1_a_g = gradients.data() + 3;

        double* coords_B_2_a_g = gradients.data() + 6;

        double* coords_B_3_a_g = gradients.data() + 9;

        double* coords_B_4_a_g = gradients.data() + 12;

        double w12 = -9.721486914088159e-02;  // from MBpol
        double w13 = -9.721486914088159e-02;
        double wcross = 9.859272078406150e-02;

        variable vs[10];

        double xs[10];

        double gxs[10];

        xs[0] = vs[0].v_exp(m_k_x_intra_A_B_1, coords_A_1_a, coords_B_1_a);
        xs[1] = vs[1].v_exp(m_k_x_intra_A_B_1, coords_A_1_a, coords_B_2_a);
        xs[2] = vs[2].v_exp(m_k_x_intra_A_B_1, coords_A_1_a, coords_B_3_a);
        xs[3] = vs[3].v_exp(m_k_x_intra_A_B_1, coords_A_1_a, coords_B_4_a);
        xs[4] = vs[4].v_exp(m_k_x_intra_B_B_1, coords_B_1_a, coords_B_2_a);
        xs[5] = vs[5].v_exp(m_k_x_intra_B_B_1, coords_B_1_a, coords_B_3_a);
        xs[6] = vs[6].v_exp(m_k_x_intra_B_B_1, coords_B_1_a, coords_B_4_a);
        xs[7] = vs[7].v_exp(m_k_x_intra_B_B_1, coords_B_2_a, coords_B_3_a);
        xs[8] = vs[8].v_exp(m_k_x_intra_B_B_1, coords_B_2_a, coords_B_4_a);
        xs[9] = vs[9].v_exp(m_k_x_intra_B_B_1, coords_B_3_a, coords_B_4_a);

        sw = 1.0;

        energies[j] = my_poly.eval(xs, coefficients.data(), gxs);
        energies_sw[j] = energies[j] * sw;

        for (size_t i = 0; i < 10; i++) {
            gxs[i] *= sw;
        }

        vs[0].grads(gxs[0], coords_A_1_a_g, coords_B_1_a_g, coords_A_1_a, coords_B_1_a);
        vs[1].grads(gxs[1], coords_A_1_a_g, coords_B_2_a_g, coords_A_1_a, coords_B_2_a);
        vs[2].grads(gxs[2], coords_A_1_a_g, coords_B_3_a_g, coords_A_1_a, coords_B_3_a);
        vs[3].grads(gxs[3], coords_A_1_a_g, coords_B_4_a_g, coords_A_1_a, coords_B_4_a);
        vs[4].grads(gxs[4], coords_B_1_a_g, coords_B_2_a_g, coords_B_1_a, coords_B_2_a);
        vs[5].grads(gxs[5], coords_B_1_a_g, coords_B_3_a_g, coords_B_1_a, coords_B_3_a);
        vs[6].grads(gxs[6], coords_B_1_a_g, coords_B_4_a_g, coords_B_1_a, coords_B_4_a);
        vs[7].grads(gxs[7], coords_B_2_a_g, coords_B_3_a_g, coords_B_2_a, coords_B_3_a);
        vs[8].grads(gxs[8], coords_B_2_a_g, coords_B_4_a_g, coords_B_2_a, coords_B_4_a);
        vs[9].grads(gxs[9], coords_B_3_a_g, coords_B_4_a_g, coords_B_3_a, coords_B_4_a);

        for (size_t i = 0; i < 3; i++) {
            gradients[0 + i] += 0.0;
        }

        for (size_t i = 0; i < 15; i++) {
            grad1[i + j * 15] += gradients[0 + i];
        }

        if (virial != 0) {
            (*virial)[0] += -coords_A_1_a[0] * coords_A_1_a_g[0] - coords_B_1_a[0] * coords_B_1_a_g[0] -
                            coords_B_2_a[0] * coords_B_2_a_g[0] - coords_B_3_a[0] * coords_B_3_a_g[0] -
                            coords_B_4_a[0] * coords_B_4_a_g[0];

            (*virial)[1] += -coords_A_1_a[0] * coords_A_1_a_g[1] - coords_B_1_a[0] * coords_B_1_a_g[1] -
                            coords_B_2_a[0] * coords_B_2_a_g[1] - coords_B_3_a[0] * coords_B_3_a_g[1] -
                            coords_B_4_a[0] * coords_B_4_a_g[1];

            (*virial)[2] += -coords_A_1_a[0] * coords_A_1_a_g[2] - coords_B_1_a[0] * coords_B_1_a_g[2] -
                            coords_B_2_a[0] * coords_B_2_a_g[2] - coords_B_3_a[0] * coords_B_3_a_g[2] -
                            coords_B_4_a[0] * coords_B_4_a_g[2];

            (*virial)[4] += -coords_A_1_a[1] * coords_A_1_a_g[1] - coords_B_1_a[1] * coords_B_1_a_g[1] -
                            coords_B_2_a[1] * coords_B_2_a_g[1] - coords_B_3_a[1] * coords_B_3_a_g[1] -
                            coords_B_4_a[1] * coords_B_4_a_g[1];

            (*virial)[5] += -coords_A_1_a[1] * coords_A_1_a_g[2] - coords_B_1_a[1] * coords_B_1_a_g[2] -
                            coords_B_2_a[1] * coords_B_2_a_g[2] - coords_B_3_a[1] * coords_B_3_a_g[2] -
                            coords_B_4_a[1] * coords_B_4_a_g[2];

            (*virial)[8] += -coords_A_1_a[2] * coords_A_1_a_g[2] - coords_B_1_a[2] * coords_B_1_a_g[2] -
                            coords_B_2_a[2] * coords_B_2_a_g[2] - coords_B_3_a[2] * coords_B_3_a_g[2] -
                            coords_B_4_a[2] * coords_B_4_a_g[2];

            (*virial)[3] = (*virial)[1];
            (*virial)[6] = (*virial)[2];
            (*virial)[7] = (*virial)[5];
        }
    }
    return energies_sw;
}

//----------------------------------------------------------------------------//
}  // namespace mbnrg_A1B4_deg5
