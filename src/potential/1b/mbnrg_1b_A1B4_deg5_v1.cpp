#include "mbnrg_1b_A1B4_deg5_v1.h"

////////////////////////////////////////////////////////////////////////////////

namespace mbnrg_A1B4_deg5 {

mbnrg_A1B4_deg5_v1::mbnrg_A1B4_deg5_v1(const std::string mon1) {
    // =====>> BEGIN SECTION CONSTRUCTOR <<=====
    // =>> PASTE RIGHT BELOW THIS LINE <==

    if (mon1 == "so4a") {
        coefficients = std::vector<double>{-4.220681958055882e+02,  // 0
                                           4.036402920608632e+02,   // 1
                                           -8.490252436467226e+02,  // 2
                                           5.335063193146569e+02,   // 3
                                           -2.295876461390011e+02,  // 4
                                           -8.169802380362084e+01,  // 5
                                           -2.990144653483576e+02,  // 6
                                           -1.602680750132961e+03,  // 7
                                           -2.149052300295779e+02,  // 8
                                           -1.702430980144802e+03,  // 9
                                           2.240109158448303e+01,   // 10
                                           -6.095876412752657e+02,  // 11
                                           -1.462196058145563e+02,  // 12
                                           -9.977730763259136e+02,  // 13
                                           9.077234275556198e+02,   // 14
                                           -8.632734425625735e+02,  // 15
                                           4.820376879000268e+03,   // 16
                                           6.639586459215024e+02,   // 17
                                           1.307998975234021e+01,   // 18
                                           -4.521181925946121e+02,  // 19
                                           -1.236402805320810e+03,  // 20
                                           -1.353648971143286e+03,  // 21
                                           2.205913519302222e+02,   // 22
                                           6.986809120932088e+02,   // 23
                                           -1.015837190588760e+03,  // 24
                                           7.249854192056283e+02,   // 25
                                           -7.586337831580490e+02,  // 26
                                           -2.897816081968870e+02,  // 27
                                           -3.103120099065115e+02,  // 28
                                           -4.600461698709912e+02,  // 29
                                           1.328354151788085e+03,   // 30
                                           -2.525260254154014e+02,  // 31
                                           1.084771717615618e+03,   // 32
                                           -1.198944471629240e+03,  // 33
                                           1.477211158708460e+03,   // 34
                                           -3.650978421372927e+02,  // 35
                                           4.195934490450494e+02,   // 36
                                           -2.283642877116149e+03,  // 37
                                           6.172554161647373e+02,   // 38
                                           -1.808506404172347e+01,  // 39
                                           -6.113598818917034e+02,  // 40
                                           -6.884492751767445e+02,  // 41
                                           -7.223420334920597e+02,  // 42
                                           -8.887025777995327e+02,  // 43
                                           -2.524833750941593e+02,  // 44
                                           7.660998068598242e+01,   // 45
                                           5.103859224594273e+02,   // 46
                                           8.908795990100990e+02,   // 47
                                           -1.260961511638279e+03,  // 48
                                           9.178230065916914e+01,   // 49
                                           7.706674998425820e+03,   // 50
                                           -2.086797705700156e+02,  // 51
                                           -1.173601278351625e+02,  // 52
                                           4.866251486769183e+03,   // 53
                                           1.753744576515901e+03,   // 54
                                           1.144313342514565e+03,   // 55
                                           -3.059402587571922e+02,  // 56
                                           -1.982506118506397e+03,  // 57
                                           -3.222483946427097e+02,  // 58
                                           -2.196253690647406e+03,  // 59
                                           -8.255332660765920e+02,  // 60
                                           -7.614426783042815e+01,  // 61
                                           1.120980162891855e+03,   // 62
                                           -8.128549319049690e+02,  // 63
                                           3.670639015101582e+02,   // 64
                                           -1.847878162641683e+03,  // 65
                                           5.319999099955185e+03,   // 66
                                           3.954866450704646e+02,   // 67
                                           -6.213982433250231e+02,  // 68
                                           1.674735534381720e+02,   // 69
                                           3.826248024064888e+01,   // 70
                                           7.146615378345564e+02,   // 71
                                           -1.005164105738487e+03,  // 72
                                           -2.659740174463948e+02,  // 73
                                           -6.449143777759928e+02,  // 74
                                           5.417537129605381e+02,   // 75
                                           -8.804227217768599e+02,  // 76
                                           6.311934924399533e+01,   // 77
                                           1.938866825043076e+03,   // 78
                                           -4.975233972284860e+02,  // 79
                                           -8.414931646015073e+02,  // 80
                                           -9.526767089146890e+02,  // 81
                                           5.554692905177565e+02,   // 82
                                           3.031109768679778e+03,   // 83
                                           1.001523875077398e+03,   // 84
                                           -7.326183351566025e+02,  // 85
                                           5.667640983357266e+03,   // 86
                                           1.540892697703733e+02,   // 87
                                           4.262115172553257e+02,   // 88
                                           5.448955752687056e+02,   // 89
                                           -5.475937798596473e+02,  // 90
                                           1.995173581764857e+02,   // 91
                                           1.129304923396097e+03,   // 92
                                           1.650499036173020e+02,   // 93
                                           -6.083581882403381e+02,  // 94
                                           -7.400331576946785e+02,  // 95
                                           -2.200345005104471e+02,  // 96
                                           -1.284167085561319e+03,  // 97
                                           4.261536484731026e-01,   // 98
                                           9.977135181789129e+02,   // 99
                                           -4.682227694098300e+00,  // 100
                                           -2.817984576563235e+01,  // 101
                                           -1.064247539210761e+03,  // 102
                                           1.304822165585367e+03,   // 103
                                           3.449153466356632e+02,   // 104
                                           -8.743722566558280e+01,  // 105
                                           -1.128698719359563e+03,  // 106
                                           -9.433887504510333e+02,  // 107
                                           9.492351860875447e+02,   // 108
                                           -1.155813953165352e+02,  // 109
                                           -4.504868537692379e+01,  // 110
                                           -6.576818741907364e+02,  // 111
                                           -7.301424205794834e+02,  // 112
                                           -2.565578901861023e+02,  // 113
                                           -2.459751313497413e+01,  // 114
                                           -3.022954891351703e+02,  // 115
                                           -1.115451848130227e+03,  // 116
                                           4.259089228593254e+03,   // 117
                                           -6.059687558787230e+02,  // 118
                                           -1.838380756465657e+02,  // 119
                                           -7.509320777537636e+01,  // 120
                                           -2.742294578818966e+02,  // 121
                                           1.048600010093008e+03,   // 122
                                           -8.949803843746586e+02,  // 123
                                           4.978663707283947e+02,   // 124
                                           -3.986914117579826e+02,  // 125
                                           3.492498324168740e+01,   // 126
                                           5.282390179268874e+01,   // 127
                                           -1.052277256571812e+03,  // 128
                                           -7.091495700501222e+02,  // 129
                                           1.665107293585561e+03,   // 130
                                           9.877516668834080e+02,   // 131
                                           2.002417475296550e+02,   // 132
                                           2.518918500041382e+02,   // 133
                                           -4.187945252286172e+02,  // 134
                                           -3.054539255335924e+02,  // 135
                                           2.999228704504289e+02,   // 136
                                           -1.359472987649273e+03,  // 137
                                           2.719759612167647e+02,   // 138
                                           2.156947952728447e+02,   // 139
                                           -6.940447196332107e+01,  // 140
                                           -1.365833925550886e+02,  // 141
                                           8.042327609138008e+02,   // 142
                                           2.031236138484596e+03,   // 143
                                           -1.726632944106137e+02,  // 144
                                           -4.732615811159473e+01,  // 145
                                           1.794606849891401e+03,   // 146
                                           -1.571288092782624e+03,  // 147
                                           -4.440010194815760e+02,  // 148
                                           7.460010947963688e+02,   // 149
                                           1.170975776374530e+02,   // 150
                                           2.802417945256866e+03,   // 151
                                           2.174826014865385e+03,   // 152
                                           1.100185935869204e+03,   // 153
                                           -1.300251975167160e+02,  // 154
                                           3.925066292403944e+02,   // 155
                                           -1.215253451651420e+02,  // 156
                                           -9.252171249291506e+01,  // 157
                                           2.460360559935241e+02,   // 158
                                           -4.039708697013659e+02,  // 159
                                           -6.959994546422224e+01,  // 160
                                           -1.025980611467628e+03,  // 161
                                           -3.998850661602840e+02,  // 162
                                           -6.090721125374045e+02,  // 163
                                           6.641081118020736e+02,   // 164
                                           -1.802949701593719e+03,  // 165
                                           -7.730474750678718e+02,  // 166
                                           -1.276082090607641e+02,  // 167
                                           -8.077387786550602e+02,  // 168
                                           4.886270074385763e+03,   // 169
                                           -2.891444960326318e+01,  // 170
                                           4.139824951163287e+03,   // 171
                                           -8.368498972963394e+01,  // 172
                                           1.320828510772702e+03,   // 173
                                           -1.118907429748548e+03,  // 174
                                           1.331832294910357e+03,   // 175
                                           1.689432389613826e+03,   // 176
                                           1.452768965050279e+03,   // 177
                                           4.501471912264549e+03,   // 178
                                           6.032503285750022e+03,   // 179
                                           -3.654258700496687e+02,  // 180
                                           -5.077120296264492e+02,  // 181
                                           -8.544461941266690e+01,  // 182
                                           1.471457064526178e+03,   // 183
                                           5.042190427478398e+01,   // 184
                                           2.293264744986496e+02,   // 185
                                           -4.965048414176773e+02,  // 186
                                           -1.918462926436386e+02,  // 187
                                           -1.006334168713000e+03,  // 188
                                           -5.306390734596829e+02,  // 189
                                           -3.867545200676585e+02,  // 190
                                           4.784278366366013e+02,   // 191
                                           -2.866183281110106e+02,  // 192
                                           -1.241232933729473e+03,  // 193
                                           2.690134715162312e+01,   // 194
                                           -7.722082922202105e+01,  // 195
                                           -5.206136862616804e+02,  // 196
                                           -1.524530806266189e+03,  // 197
                                           3.965699167099106e+02,   // 198
                                           -1.540179921582056e+02,  // 199
                                           7.659144558897842e+03,   // 200
                                           -1.118552687520111e+03,  // 201
                                           -8.999863012880639e+02,  // 202
                                           8.619977348890131e+02,   // 203
                                           2.897959909144790e+02,   // 204
                                           -2.690201105885250e+02,  // 205
                                           1.218773749839837e+03};  // 206
        m_k_x_intra_A_B_1 = 1.182482852092764e+00;                  // A^(-1))
        m_k_x_intra_B_B_1 = 3.173591920570999e-01;                  // A^(-1))
        m_ri = 6.000000000000000e+00;                               // A
        m_ro = 8.000000000000000e+00;                               // A

    }  // end if mon1 == "so4a"
    // =====>> END SECTION CONSTRUCTOR <<=====
}

//----------------------------------------------------------------------------//

double mbnrg_A1B4_deg5_v1::f_switch(const double r, double& g) {
    if (r > m_ro) {
        g = 0.0;
        return 0.0;
    } else if (r > m_ri) {
        const double t1 = M_PI / (m_ro - m_ri);
        const double x = (r - m_ri) * t1;
        g = -std::sin(x) * t1 / 2.0;
        return (1.0 + std::cos(x)) / 2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

std::vector<double> mbnrg_A1B4_deg5_v1::eval(const double* xyz1, const size_t n) {
    std::vector<double> energies(n, 0.0);
    std::vector<double> energies_sw(n, 0.0);

    std::vector<double> xyz(15);
    double sw = 0.0;
    polynomial my_poly;

    for (size_t j = 0; j < n; j++) {
        const double* mon1 = xyz1 + 15 * j;

        if (false) {
            continue;
        }

        std::copy(mon1, mon1 + 15, xyz.begin() + 0);

        const double* coords_A_1_a = xyz.data() + 0;

        const double* coords_B_1_a = xyz.data() + 3;

        const double* coords_B_2_a = xyz.data() + 6;

        const double* coords_B_3_a = xyz.data() + 9;

        const double* coords_B_4_a = xyz.data() + 12;

        double w12 = -9.721486914088159e-02;  // from MBpol
        double w13 = -9.721486914088159e-02;
        double wcross = 9.859272078406150e-02;

        variable vs[10];

        double xs[10];

        xs[0] = vs[0].v_exp(m_k_x_intra_A_B_1, coords_A_1_a, coords_B_1_a);
        xs[1] = vs[1].v_exp(m_k_x_intra_A_B_1, coords_A_1_a, coords_B_2_a);
        xs[2] = vs[2].v_exp(m_k_x_intra_A_B_1, coords_A_1_a, coords_B_3_a);
        xs[3] = vs[3].v_exp(m_k_x_intra_A_B_1, coords_A_1_a, coords_B_4_a);
        xs[4] = vs[4].v_exp(m_k_x_intra_B_B_1, coords_B_1_a, coords_B_2_a);
        xs[5] = vs[5].v_exp(m_k_x_intra_B_B_1, coords_B_1_a, coords_B_3_a);
        xs[6] = vs[6].v_exp(m_k_x_intra_B_B_1, coords_B_1_a, coords_B_4_a);
        xs[7] = vs[7].v_exp(m_k_x_intra_B_B_1, coords_B_2_a, coords_B_3_a);
        xs[8] = vs[8].v_exp(m_k_x_intra_B_B_1, coords_B_2_a, coords_B_4_a);
        xs[9] = vs[9].v_exp(m_k_x_intra_B_B_1, coords_B_3_a, coords_B_4_a);

        sw = 1.0;

        energies[j] = my_poly.eval(xs, coefficients.data());
        energies_sw[j] = energies[j] * sw;
    }
    return energies_sw;
}

//----------------------------------------------------------------------------//

std::vector<double> mbnrg_A1B4_deg5_v1::eval(const double* xyz1, double* grad1, const size_t n,
                                             std::vector<double>* virial) {
    std::vector<double> energies(n, 0.0);
    std::vector<double> energies_sw(n, 0.0);

    std::vector<double> xyz(15);
    double sw = 0.0;
    polynomial my_poly;

    for (size_t j = 0; j < n; j++) {
        const double* mon1 = xyz1 + 15 * j;

        if (false) {
            continue;
        }

        std::vector<double> gradients(15, 0.0);

        std::copy(mon1, mon1 + 15, xyz.begin() + 0);
        const double* coords_A_1_a = xyz.data() + 0;

        const double* coords_B_1_a = xyz.data() + 3;

        const double* coords_B_2_a = xyz.data() + 6;

        const double* coords_B_3_a = xyz.data() + 9;

        const double* coords_B_4_a = xyz.data() + 12;

        double* coords_A_1_a_g = gradients.data() + 0;

        double* coords_B_1_a_g = gradients.data() + 3;

        double* coords_B_2_a_g = gradients.data() + 6;

        double* coords_B_3_a_g = gradients.data() + 9;

        double* coords_B_4_a_g = gradients.data() + 12;

        double w12 = -9.721486914088159e-02;  // from MBpol
        double w13 = -9.721486914088159e-02;
        double wcross = 9.859272078406150e-02;

        variable vs[10];

        double xs[10];

        double gxs[10];

        xs[0] = vs[0].v_exp(m_k_x_intra_A_B_1, coords_A_1_a, coords_B_1_a);
        xs[1] = vs[1].v_exp(m_k_x_intra_A_B_1, coords_A_1_a, coords_B_2_a);
        xs[2] = vs[2].v_exp(m_k_x_intra_A_B_1, coords_A_1_a, coords_B_3_a);
        xs[3] = vs[3].v_exp(m_k_x_intra_A_B_1, coords_A_1_a, coords_B_4_a);
        xs[4] = vs[4].v_exp(m_k_x_intra_B_B_1, coords_B_1_a, coords_B_2_a);
        xs[5] = vs[5].v_exp(m_k_x_intra_B_B_1, coords_B_1_a, coords_B_3_a);
        xs[6] = vs[6].v_exp(m_k_x_intra_B_B_1, coords_B_1_a, coords_B_4_a);
        xs[7] = vs[7].v_exp(m_k_x_intra_B_B_1, coords_B_2_a, coords_B_3_a);
        xs[8] = vs[8].v_exp(m_k_x_intra_B_B_1, coords_B_2_a, coords_B_4_a);
        xs[9] = vs[9].v_exp(m_k_x_intra_B_B_1, coords_B_3_a, coords_B_4_a);

        sw = 1.0;

        energies[j] = my_poly.eval(xs, coefficients.data(), gxs);
        energies_sw[j] = energies[j] * sw;

        for (size_t i = 0; i < 10; i++) {
            gxs[i] *= sw;
        }

        vs[0].grads(gxs[0], coords_A_1_a_g, coords_B_1_a_g, coords_A_1_a, coords_B_1_a);
        vs[1].grads(gxs[1], coords_A_1_a_g, coords_B_2_a_g, coords_A_1_a, coords_B_2_a);
        vs[2].grads(gxs[2], coords_A_1_a_g, coords_B_3_a_g, coords_A_1_a, coords_B_3_a);
        vs[3].grads(gxs[3], coords_A_1_a_g, coords_B_4_a_g, coords_A_1_a, coords_B_4_a);
        vs[4].grads(gxs[4], coords_B_1_a_g, coords_B_2_a_g, coords_B_1_a, coords_B_2_a);
        vs[5].grads(gxs[5], coords_B_1_a_g, coords_B_3_a_g, coords_B_1_a, coords_B_3_a);
        vs[6].grads(gxs[6], coords_B_1_a_g, coords_B_4_a_g, coords_B_1_a, coords_B_4_a);
        vs[7].grads(gxs[7], coords_B_2_a_g, coords_B_3_a_g, coords_B_2_a, coords_B_3_a);
        vs[8].grads(gxs[8], coords_B_2_a_g, coords_B_4_a_g, coords_B_2_a, coords_B_4_a);
        vs[9].grads(gxs[9], coords_B_3_a_g, coords_B_4_a_g, coords_B_3_a, coords_B_4_a);

        for (size_t i = 0; i < 3; i++) {
            gradients[0 + i] += 0.0;
        }

        for (size_t i = 0; i < 15; i++) {
            grad1[i + j * 15] += gradients[0 + i];
        }

        if (virial != 0) {
            (*virial)[0] += -coords_A_1_a[0] * coords_A_1_a_g[0] - coords_B_1_a[0] * coords_B_1_a_g[0] -
                            coords_B_2_a[0] * coords_B_2_a_g[0] - coords_B_3_a[0] * coords_B_3_a_g[0] -
                            coords_B_4_a[0] * coords_B_4_a_g[0];

            (*virial)[1] += -coords_A_1_a[0] * coords_A_1_a_g[1] - coords_B_1_a[0] * coords_B_1_a_g[1] -
                            coords_B_2_a[0] * coords_B_2_a_g[1] - coords_B_3_a[0] * coords_B_3_a_g[1] -
                            coords_B_4_a[0] * coords_B_4_a_g[1];

            (*virial)[2] += -coords_A_1_a[0] * coords_A_1_a_g[2] - coords_B_1_a[0] * coords_B_1_a_g[2] -
                            coords_B_2_a[0] * coords_B_2_a_g[2] - coords_B_3_a[0] * coords_B_3_a_g[2] -
                            coords_B_4_a[0] * coords_B_4_a_g[2];

            (*virial)[4] += -coords_A_1_a[1] * coords_A_1_a_g[1] - coords_B_1_a[1] * coords_B_1_a_g[1] -
                            coords_B_2_a[1] * coords_B_2_a_g[1] - coords_B_3_a[1] * coords_B_3_a_g[1] -
                            coords_B_4_a[1] * coords_B_4_a_g[1];

            (*virial)[5] += -coords_A_1_a[1] * coords_A_1_a_g[2] - coords_B_1_a[1] * coords_B_1_a_g[2] -
                            coords_B_2_a[1] * coords_B_2_a_g[2] - coords_B_3_a[1] * coords_B_3_a_g[2] -
                            coords_B_4_a[1] * coords_B_4_a_g[2];

            (*virial)[8] += -coords_A_1_a[2] * coords_A_1_a_g[2] - coords_B_1_a[2] * coords_B_1_a_g[2] -
                            coords_B_2_a[2] * coords_B_2_a_g[2] - coords_B_3_a[2] * coords_B_3_a_g[2] -
                            coords_B_4_a[2] * coords_B_4_a_g[2];

            (*virial)[3] = (*virial)[1];
            (*virial)[6] = (*virial)[2];
            (*virial)[7] = (*virial)[5];
        }
    }
    return energies_sw;
}

//----------------------------------------------------------------------------//
}  // namespace mbnrg_A1B4_deg5
